#include <iostream>
#include <random>
#include "classifier.h"

typedef union {
  double f;
  unsigned long u;
} ufloat;


void print_binary(int amount,  unsigned long num)
{
  for (int i = amount-1; i >= 0; i--)
    std::cout << ((num & (1<<i)) ? 1 : 0);
}

int main()
{
  {% for feature in features -%}
  std::random_device rd_{{feature['name']}};
  std::mt19937 gen_{{feature['name']}}(rd_{{feature['name']}}());
  std::uniform_{{"real" if feature['type'] == "double" else "int"}}_distribution<> distrib_{{feature['name']}}({{feature['min']}}, {{feature['max']}});
  {% endfor %}


  {% for feature in features -%}
  {{"ufloat" if feature['type'] == "double" else feature['type']}}{{" data_"}}{{feature['name']}}{{";"}}
  {% endfor %}
  {% for predicted_class in classes -%}
  int class_{{predicted_class}};
  {% endfor %}

  for (int i = 0; i < 10000; i++){
    {% for feature in features -%}
    data_{{feature['name']}}{{".f" if feature['type'] == "double"}} = ({{feature['type']}}) distrib_{{feature['name']}}(gen_{{feature['name']}});
    print_binary(64, data_{{feature['name']}}{{".u" if feature['type'] == "double"}});
    std::cout << " ";
    {% endfor %}
    {% for predicted_class in classes -%}
    class_{{predicted_class}} = 0;
    {% endfor %}    
    classifier({% for feature in features -%}{{"data_"}}{{feature['name']}}{{".f, " if feature['type'] == "double" else ", "}}{% endfor %}{% for predicted_class in classes -%}{{"&class_"}}{{predicted_class}}{{", " if not loop.last else ");"}}{% endfor %}

    {% for predicted_class in classes -%}
    print_binary(1, class_{{predicted_class}}); 
    std::cout <<{{"\" \"" if not loop.last else "std::endl"}};
    {% endfor %}
  }
}

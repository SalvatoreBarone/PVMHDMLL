#include <iostream>
#include <fstream>
#include <bitset>
#include <limits>
#include <random>
#include <cassert>
#include "classifier.h"

typedef std::numeric_limits< double > double_limits;

void print_binary_64(std::ostream& stream, void * const data)
{
  unsigned long * udata = (unsigned long *)data;
  stream << std::bitset<64>(*udata);
}

int main(int argc, char** argv)
{
  assert(argc == 3);
  std::ofstream bin_stream(argv[1], std::ios::out);
  std::ofstream debug_stream(argv[2], std::ios::out);
  debug_stream.precision(double_limits::max_digits10);

  {% for feature in features -%}
  std::random_device rd_{{feature['name']}};
  std::mt19937 gen_{{feature['name']}}(rd_{{feature['name']}}());
  std::uniform_{{"real" if feature['type'] == "double" else "int"}}_distribution<> distrib_{{feature['name']}}({{feature['min']}}, {{feature['max']}});
  {% endfor %}

  {% for feature in features -%}
  {{feature['type']}}{{" data_"}}{{feature['name']}}{{";"}}
  {% endfor %}
  {% for predicted_class in classes -%}
  int class_{{predicted_class}};
  {% endfor %}

  for (int i = 0; i < 10000; i++){
    {% for feature in features -%}
    data_{{feature['name']}} = distrib_{{feature['name']}}(gen_{{feature['name']}});
    print_binary_64(bin_stream, &data_{{feature['name']}});
    bin_stream << " ";
    debug_stream << data_{{feature['name']}} << {{"\" \"" if not loop.last else "std::endl"}};
    {% endfor %}
    {% for predicted_class in classes -%}
    class_{{predicted_class}} = 0;
    {% endfor %}    
    classifier({% for feature in features -%}{{"data_"}}{{feature['name']}},{% endfor %}{% for predicted_class in classes -%}{{"&class_"}}{{predicted_class}}{{", " if not loop.last else ");"}}{% endfor %}

    {% for predicted_class in classes -%}
    bin_stream << std::bitset<1>(class_{{predicted_class}}) << {{"\" \"" if not loop.last else "std::endl"}};
    {% endfor %}
  }
}

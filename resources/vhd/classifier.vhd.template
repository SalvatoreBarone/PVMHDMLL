-- Copyright 2020-2021 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by PVMHDMLL 
-- https://github.com/SalvatoreBarone/PVMHDMLL 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

{% for tree in trees -%}
library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;
entity decision_tree_{{tree['name']}} is
  generic (
    data_width      : natural;
    parallel_blocks : natural);
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    enable  : in std_logic;
{% for feature in features -%}
      {{"    data_"}}{{feature['name']}}{{": in std_logic_vector(data_width-1 downto 0);"}}
{% endfor %}{% for predicted_class in classes -%}
      {{"    class_"}}{{predicted_class}}{{" : out std_logic"}}{{";" if not loop.last else ");"}}
{% endfor %}end decision_tree_{{tree['name']}};
architecture structural of decision_tree_{{tree['name']}} is
  component decision_box is
    generic (
      data_width      : natural;
      data_type       : data_type_t;
      comp_operator   : comp_operator_t;
      parallel_blocks : natural);
    port ( 
      clock   : in  std_logic;
      reset_n : in  std_logic;
      enable  : in  std_logic;
      data_1  : in  std_logic_vector (data_width-1 downto 0);
      data_2  : in  std_logic_vector (data_width-1 downto 0);
      result  : out std_logic);
  end component;
{% for box in tree['boxes'] -%}
  {{"  signal   "}}{{box['name']}}{{" : std_logic := '0';"}}
{% endfor %}{% for box in tree['boxes'] -%}
  {{"  constant "}}{{box['name']}}{{"_thr : std_logic_vector(data_width-1 downto 0) := x\""}}{{box['threshold_hex']}}{{"\""}}{{";"}}
{% endfor %}begin
{% for box in tree['boxes'] -%}
      {{"  "}}{{box['name']}}{{"_inst : decision_box  generic map(data_width, "}}{{box['data_type']}}{{", "}}{{box['operator']}}{{", parallel_blocks) port map(clock, reset_n, enable, data_"}}{{box['feature']}}{{", "}}{{box['name']}}{{"_thr, "}}{{box['name']}}{{");"}}  
{% endfor %}{% for function in tree['assertions'] -%}
      {{"  class_"}}{{function['class']}}{{" <= "}}{{function['expression']}}{{";"}}
{% endfor %}end structural;




{% endfor %}


library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;
entity classifier is
  generic (
    data_width      : natural;
    parallel_blocks : natural;
    pipe_stages     : natural);
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    enable  : in std_logic;
{% for feature in features -%}
      {{"    data_"}}{{feature['name']}}{{": in std_logic_vector(data_width-1 downto 0);"}}
{% endfor %}{% for predicted_class in classes -%}
      {{"    class_"}}{{predicted_class}}{{" : out std_logic"}}{{";" if not loop.last else ");"}}
{% endfor %}end classifier;
architecture structural of classifier is
  component combiner is
    generic	(
      data_width  : natural;
      pipe_stages : natural);
    port (
      clock    : in  std_logic;
      reset_n  : in  std_logic;
      data_in  : in  std_logic_vector (data_width-1 downto 0);
      majority : out std_logic);
  end component;
  {% for tree in trees -%}
  component decision_tree_{{tree['name']}} is
    generic (
      data_width      : natural;
      parallel_blocks : natural);
    port (
      clock   : in std_logic;
      reset_n : in std_logic;
      enable  : in std_logic;
{% for feature in features -%}
      {{"    data_"}}{{feature['name']}}{{": in std_logic_vector(data_width-1 downto 0);"}}
{% endfor %}{% for predicted_class in classes -%}
      {{"    class_"}}{{predicted_class}}{{" : out std_logic"}}{{";" if not loop.last else ");"}}
{% endfor %}  end component;{{"\n  " if not loop.last}}{% endfor %}
{% for predicted_class in classes -%}
{{"  "}}signal class_{{predicted_class}}_results : std_logic_vector({{trees|length-1}} downto 0) := (others => '0');
{% endfor %}begin
  {% for tree in trees -%}{% set outer_loop = loop %}tree_{{tree['name']}} : decision_tree_{{tree['name']}} 
    generic map (data_width, parallel_blocks) 
    port map (clock, reset_n, enable, {% for feature in features -%}data_{{feature['name']}}, {% endfor %}{% for predicted_class in classes -%}class_{{predicted_class}}_results({{outer_loop.index-1}}){{", " if not loop.last else ");"}}{% endfor %}
  {% endfor %}{% if trees|length > 1 %}{% for predicted_class in classes -%}
  comb_class_{{predicted_class}} : combiner generic map({{trees|length}}, pipe_stages) port map(clock, reset_n, class_{{predicted_class}}_results, class_{{predicted_class}});
  {% endfor %}{% else %}{% for predicted_class in classes -%}
     class_{{predicted_class}} <= class_{{predicted_class}}_results(0);
  {% endfor %}{% endif %}
end structural;
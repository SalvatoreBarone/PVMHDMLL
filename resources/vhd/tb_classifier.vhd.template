-- Copyright 2020-2021 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by PVMHDMLL 
-- https://github.com/SalvatoreBarone/PVMHDMLL 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
use std.textio.all;
use ieee.std_logic_textio.all;
library work;
use work.debug_func.all;
use work.common_types.all;
entity tb_classifier is
end entity tb_classifier;
architecture testbench of tb_classifier is
  component classifier is
    generic (
      data_width      : natural;
      parallel_blocks : natural;
      pipe_stages     : natural);
    port (
      clock   : std_logic;
      reset_n : std_logic;
      enable  : std_logic;
      {% for feature in features -%}
      {{"data_"}}{{feature['name']}}{{": in std_logic_vector(data_width-1 downto 0);"}}
      {% endfor %}{% for predicted_class in classes -%}
      {{"class_"}}{{predicted_class}}{{" : out std_logic"}}{{";" if not loop.last else ");"}}
      {% endfor %}end component;
  constant clock_period    : time       := 10 ns;
  signal   simulate        : std_logic  := '1';
  file     test_oracle     : text;
  constant data_width      : natural     := 32;
  constant parallel_blocks : natural     := 4;
  constant pipe_stages     : natural     := 4;
  signal   clock           : std_logic   := '0';
  signal   reset_n         : std_logic   := '0';
  signal   enable          : std_logic   := '0';
{% for feature in features -%}
  {{"  signal data_"}}{{feature['name']}}{{": std_logic_vector(data_width-1 downto 0) := (others => '0');"}}
{% endfor %}{% for predicted_class in classes -%}
  {{"  signal class_"}}{{predicted_class}}{{" : std_logic"}}{{":= '0';"}}
{% endfor %}begin
  uut : classifier
    generic map(data_width, parallel_blocks, pipe_stages)
    port map(clock, reset_n, enable, {% for feature in features -%}data_{{feature['name']}}, {% endfor %}{% for predicted_class in classes -%}{{"class_"}}{{predicted_class}}{{", " if not loop.last else ");"}}{% endfor %}
  clock_process : process
  begin
    while simulate = '1' loop
      clock <= not clock;
      wait for clock_period / 2;
    end loop;
    wait;
  end process clock_process;
  stim_process : process
    variable rline : line;
    variable space : character;
{% for feature in features -%}
  {{"    variable read_data_"}}{{feature['name']}}{{" : std_logic_vector(data_width-1 downto 0);"}}
{% endfor %}{% for predicted_class in classes -%}
  {{"    variable read_class_"}}{{predicted_class}}{{" : std_logic"}}{{";"}}
{% endfor %}  begin
    reset_n <= '0';
    wait for 10 ns;	
    reset_n <= '1';
    enable <= '1';
    file_open(test_oracle, "../tb_classifier.txt", read_mode);
    while not endfile(test_oracle) loop
      readline(test_oracle, rline);
{% for feature in features -%}{{"      read(rline, read_data_"}}{{feature['name']}}{{"); read(rline, space); data_"}}{{feature['name']}}{{" <=  read_data_"}}{{feature['name']}}{{";"}}
{% endfor %}{% for predicted_class in classes -%}
  {{"      read(rline, read_class_"}}{{predicted_class}}{{"); read(rline, space);" if not loop.last else ");"}}
{% endfor %}      wait for (1+pipe_stages)*clock_period;
{% for predicted_class in classes -%}
  {{"      "}}assert read_class_{{predicted_class}} = class_{{predicted_class}} report  "Error class_{{predicted_class}}=" & std_logic'image(class_{{predicted_class}}) & " read_class_{{predicted_class}}=" & std_logic'image(read_class_{{predicted_class}}) severity failure;
{% endfor %}      end loop;
    simulate <= '0';
    wait;
  end process;
end testbench;
 

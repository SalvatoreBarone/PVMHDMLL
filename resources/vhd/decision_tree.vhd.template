-- Copyright 2020-2021 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by PVMHDMLL 
-- https://github.com/SalvatoreBarone/PVMHDMLL 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;
entity decision_tree_{{tree_name}} is
generic (data_width : natural);
port (
  clock   : std_logic;
  reset_n : std_logic;
  enable  : std_logic;

{% for feature in features -%}
    {{"  data_"}}{{feature['name']}}{{": in std_logic_vector(data_width-1 downto 0);"}}
{% endfor %}
{% for predicted_class in classes -%}
    {{"  class_"}}{{predicted_class}}{{" : out std_logic"}}{{";" if not loop.last}}
{% endfor %});
end decision_tree_{{tree_name}};
architecture structural of decision_tree_{{tree_name}} is
  component decision_box is
    generic(
        data_width     : natural;
        data_type      : data_type_t;
        comp_operator  : comp_operator_t;
        constant_value : std_logic_vector (31 downto 0);
        pipe_stages    : natural);
    port ( 
        clock   : in  std_logic;
        reset_n : in  std_logic;
        enable  : in  std_logic;
        data    : in  std_logic_vector (data_width-1 downto 0);
        result  : out std_logic);
  end component;
{% for box in decision_boxes -%}
    {{"  signal "}}{{box['name']}}{{" : std_logic := '0';\n  constant "}}{{box['name']}}{{"_thr : std_logic_vector(data_width-1 downto 0) := x\""}}{{box['threshold']}}{{"\""}}{{";"}}
{% endfor %}
begin
{% for box in decision_boxes -%}
    {{"  "}}{{box['name']}}{{"_inst : decision_box\n    generic map(data_width, "}}{{box['data_type']}}{{", "}}{{box['operator']}}{{", "}}{{box['name']}}{{"_thr, "}}{{"4)\n    port map(clock, reset_n, enable, data_"}}{{box['feature']}}{{", "}}{{box['name']}}{{");"}}  
{% endfor %}
{% for function in assertion_functions -%}
    {{"  class_"}}{{function['class']}}{{" <= "}}{{function['expression']}}{{";"}}
{% endfor %}
end structural;

